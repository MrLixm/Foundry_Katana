<katana release="4.5v1" version="4.5.1.000008">
  <node name="__SAVE_exportedNodes" type="Group">
    <node baseType="Group" edited="true" name="node2xml" ns_basicDisplay="1" ns_fromContext="legacy" ns_iconName="" ns_viewState="2" selected="true" type="Group" x="-320.0" y="-32.0">
      <group_parameter name="node2xml">
        <group_parameter hints="{&apos;widget&apos;: &apos;userParamsEditor&apos;, &apos;hideTitle&apos;: &apos;True&apos;}" name="user">
          <string_parameter expression="@node2xml" name="node_name"/>
          <string_parameter hints="{&apos;widget&apos;: &apos;fileInput&apos;}" name="export_path" value="G:\personal\code\Foundry_Katana\workspace\v0001\Foundry_Katana\src\nodegraph\node2xml\node2xml.exporter.xml"/>
          <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;scriptText&apos;: &apos;&quot;&quot;&quot;\nversion=3\npython&gt;=2.7.1\nauthor=Liam Collod\nlast_modified=12/03/2022\n\n\nConvert the selected nodes to an XML representation, and write or print it.\n\nTo be used in a scrip button.\nThe button parameter must be named &lt;export&gt; or &lt;print&gt; to execute the\n corresponding function.\n\nThe following parameters should also exists on the same node :\n- user.node_name (str) : name of the node to export/print\n- user.export_path (str) : export path of the xml\n\n&quot;&quot;&quot;\nimport os\n\nfrom Katana import NodegraphAPI, UI4\n\n\ndef err(message):\n    &quot;&quot;&quot;\n    Raise a small dialog with the given message and then raise a RuntimeError\n\n    Args:\n        message(str): error maise to raise\n    &quot;&quot;&quot;\n    message = &quot;[ScriptButton][node2xml]{}&quot;.format(message)\n    raise RuntimeError(message)\n\n\ndef log(message):\n    # the print function for this script\n    message = &quot;[ScriptButton][node2xml]{}&quot;.format(message)\n    print(message)\n    return\n\n\ndef get_selection_xml():\n    nodes = NodegraphAPI.GetAllSelectedNodes()\n    return NodegraphAPI.BuildNodesXmlIO(nodes)\n\n\ndef print_xml(xml=None):\n    xml = xml or get_selection_xml()\n    return log(&quot;\\n&quot; + xml.writeString())\n\n\ndef write_xml(target_dir, target_name, display=False):\n    &quot;&quot;&quot;\n\n    Args:\n        target_dir(str): path to an existing directory\n        target_name(str): name of the file to write without the extension\n        display(bool): True to also print the xml file\n    &quot;&quot;&quot;\n\n    target_path = os.path.join(target_dir, &quot;{}.xml&quot;.format(target_name))\n\n    xml = get_selection_xml()\n\n    if display:\n        print_xml(xml)\n\n    xml.write(\n        file=target_path,\n        outputStyles=None\n    )\n\n    return log(&quot;[write_xml] Finished. XML written to &lt;{}&gt;&quot;.format(target_path))\n\n\ndef run():\n\n    process = parameter.getName()\n\n    export_node_name = node.getParameter(&quot;user.node_name&quot;).getValue(0)\n    export_node = NodegraphAPI.GetNode(export_node_name)\n    if not export_node:\n        err(&quot;[run] Can\&apos;t find node_name={}&quot;.format(export_node_name))\n\n    # the xml function act on the selected node\n    # we save the curent selection to override it and re-apply it at the end\n    current_selection = NodegraphAPI.GetAllSelectedNodes()\n    NodegraphAPI.SetAllSelectedNodes([export_node])\n\n    if process == &quot;export&quot;:\n\n        export_path = node.getParameter(&quot;user.export_path&quot;).getValue(0)\n        if not export_path.endswith(&quot;.xml&quot;):\n            err(&quot;[run] Export path doesn\&apos;t ends with .xml: &lt;{}&gt;&quot;.format(\n                export_path))\n\n        export_dir, export_name = os.path.split(export_path)\n        export_name = os.path.splitext(export_name)[0]  # strip the .xml\n        if not os.path.exists(export_dir):\n            err(&quot;[run] Export directory must exists ! &lt;{}&gt;&quot;.format(export_path))\n\n        write_xml(\n            target_dir=export_dir,\n            target_name=export_name\n        )\n\n    elif process == &quot;print&quot;:\n        print_xml()\n\n    else:\n        err(\n            &quot;This button &lt;{}&gt; should be named &lt;export&gt; or &lt;print&gt;&quot;\n            &quot;&quot;.format(process)\n        )\n\n    NodegraphAPI.SetAllSelectedNodes(current_selection)\n    return\n\n\nrun()&apos;}" name="export" value=""/>
          <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;scriptText&apos;: &apos;&quot;&quot;&quot;\nversion=3\npython&gt;=2.7.1\nauthor=Liam Collod\nlast_modified=12/03/2022\n\n\nConvert the selected nodes to an XML representation, and write or print it.\n\nTo be used in a scrip button.\nThe button parameter must be named &lt;export&gt; or &lt;print&gt; to execute the\n corresponding function.\n\nThe following parameters should also exists on the same node :\n- user.node_name (str) : name of the node to export/print\n- user.export_path (str) : export path of the xml\n\n&quot;&quot;&quot;\nimport os\n\nfrom Katana import NodegraphAPI, UI4\n\n\ndef err(message):\n    &quot;&quot;&quot;\n    Raise a small dialog with the given message and then raise a RuntimeError\n\n    Args:\n        message(str): error maise to raise\n    &quot;&quot;&quot;\n    message = &quot;[ScriptButton][node2xml]{}&quot;.format(message)\n    raise RuntimeError(message)\n\n\ndef log(message):\n    # the print function for this script\n    message = &quot;[ScriptButton][node2xml]{}&quot;.format(message)\n    print(message)\n    return\n\n\ndef get_selection_xml():\n    nodes = NodegraphAPI.GetAllSelectedNodes()\n    return NodegraphAPI.BuildNodesXmlIO(nodes)\n\n\ndef print_xml(xml=None):\n    xml = xml or get_selection_xml()\n    return log(&quot;\\n&quot; + xml.writeString())\n\n\ndef write_xml(target_dir, target_name, display=False):\n    &quot;&quot;&quot;\n\n    Args:\n        target_dir(str): path to an existing directory\n        target_name(str): name of the file to write without the extension\n        display(bool): True to also print the xml file\n    &quot;&quot;&quot;\n\n    target_path = os.path.join(target_dir, &quot;{}.xml&quot;.format(target_name))\n\n    xml = get_selection_xml()\n\n    if display:\n        print_xml(xml)\n\n    xml.write(\n        file=target_path,\n        outputStyles=None\n    )\n\n    return log(&quot;[write_xml] Finished. XML written to &lt;{}&gt;&quot;.format(target_path))\n\n\ndef run():\n\n    process = parameter.getName()\n\n    export_node_name = node.getParameter(&quot;user.node_name&quot;).getValue(0)\n    export_node = NodegraphAPI.GetNode(export_node_name)\n    if not export_node:\n        err(&quot;[run] Can\&apos;t find node_name={}&quot;.format(export_node_name))\n\n    # the xml function act on the selected node\n    # we save the curent selection to override it and re-apply it at the end\n    current_selection = NodegraphAPI.GetAllSelectedNodes()\n    NodegraphAPI.SetAllSelectedNodes([export_node])\n\n    if process == &quot;export&quot;:\n\n        export_path = node.getParameter(&quot;user.export_path&quot;).getValue(0)\n        if not export_path.endswith(&quot;.xml&quot;):\n            err(&quot;[run] Export path doesn\&apos;t ends with .xml: &lt;{}&gt;&quot;.format(\n                export_path))\n\n        export_dir, export_name = os.path.split(export_path)\n        export_name = os.path.splitext(export_name)[0]  # strip the .xml\n        if not os.path.exists(export_dir):\n            err(&quot;[run] Export directory must exists ! &lt;{}&gt;&quot;.format(export_path))\n\n        write_xml(\n            target_dir=export_dir,\n            target_name=export_name\n        )\n\n    elif process == &quot;print&quot;:\n        print_xml()\n\n    else:\n        err(\n            &quot;This button &lt;{}&gt; should be named &lt;export&gt; or &lt;print&gt;&quot;\n            &quot;&quot;.format(process)\n        )\n\n    NodegraphAPI.SetAllSelectedNodes(current_selection)\n    return\n\n\nrun()&apos;}" name="print" value=""/>
        </group_parameter>
      </group_parameter>
    </node>
  </node>
</katana>
